//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ArkosTrackerToZXBasic {
    using System;
    
    
    /// <summary>
    ///   Clase de recurso fuertemente tipado, para buscar cadenas traducidas, etc.
    /// </summary>
    // StronglyTypedResourceBuilder generó automáticamente esta clase
    // a través de una herramienta como ResGen o Visual Studio.
    // Para agregar o quitar un miembro, edite el archivo .ResX y, a continuación, vuelva a ejecutar ResGen
    // con la opción /str o recompile su proyecto de VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class RequiredFiles {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal RequiredFiles() {
        }
        
        /// <summary>
        ///   Devuelve la instancia de ResourceManager almacenada en caché utilizada por esta clase.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ArkosTrackerToZXBasic.RequiredFiles", typeof(RequiredFiles).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Reemplaza la propiedad CurrentUICulture del subproceso actual para todas las
        ///   búsquedas de recursos mediante esta clase de recurso fuertemente tipado.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Busca un recurso adaptado de tipo System.Byte[].
        /// </summary>
        internal static byte[] Disark {
            get {
                object obj = ResourceManager.GetObject("Disark", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a ;       Arkos Tracker 2 player &quot;generic&quot; player.
        ///;       By Targhan/Arkos.
        ///;       Psg optimization trick on CPC by Madram/Overlanders.
        ///;
        ///;       This compiles with RASM. Check the compatibility page on the Arkos Tracker 2 website, it contains a source converter to any Z80 assembler!
        ///;
        ///;       The player uses the stack for optimizations. Make sure the interruptions are disabled before it is called.
        ///;       The stack pointer is saved at the beginning and restored at the end.
        ///;
        ///;       Target hardwar [resto de la cadena truncado]&quot;;.
        /// </summary>
        internal static string PlayerAkg {
            get {
                return ResourceManager.GetString("PlayerAkg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a ;       Player of sound effects, for AKG (Generic) the player, format V2 (including speed).
        ///;       This file is meant to be included to the AKG player, do not use it stand-alone.
        ///;       If you want sound effects without music, there is a specific player for that.
        ///
        ///        ;Is there a loaded Player Configuration source? If no, use a default configuration.
        ///        IFNDEF PLY_CFG_SFX_ConfigurationIsPresent
        ///                PLY_CFG_UseHardwareSounds = 1
        ///                PLY_CFG_SFX_LoopTo = 1
        ///           [resto de la cadena truncado]&quot;;.
        /// </summary>
        internal static string PlayerAkg_SoundEffects {
            get {
                return ResourceManager.GetString("PlayerAkg_SoundEffects", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a ;       Arkos Tracker 2 AKM (Minimalist) player (format V0).
        ///;       By Targhan/Arkos.
        ///;
        ///;       Thanks to Hicks/Vanity for two small (but relevant!) optimizations.
        ///
        ///;       This compiles with RASM. Check the compatibility page on the Arkos Tracker 2 website, it contains a source converter to any Z80 assembler!;
        ///
        ///;       This is a Minimalist player. Only a subset of the generic player is used. Use this player for 4k demo or other productions
        ///;       with a tight memory limitation. However, this rema [resto de la cadena truncado]&quot;;.
        /// </summary>
        internal static string PlayerAkm {
            get {
                return ResourceManager.GetString("PlayerAkm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca una cadena traducida similar a ;       Player of sound effects, for the AKM player.
        ///;       Note that this is the exact same code as for the Lightweight player, as the way to output to the PSG is the same.
        ///
        ///        ;Is there a loaded Player Configuration source? If no, use a default configuration.
        ///        IFNDEF PLY_CFG_SFX_ConfigurationIsPresent
        ///                PLY_CFG_UseHardwareSounds = 1
        ///                PLY_CFG_SFX_LoopTo = 1
        ///                PLY_CFG_SFX_NoSoftNoHard = 1
        ///                PLY_CFG_SFX_NoSoftNoHard_Noise = 1
        ///     [resto de la cadena truncado]&quot;;.
        /// </summary>
        internal static string PlayerAkm_SoundEffects {
            get {
                return ResourceManager.GetString("PlayerAkm_SoundEffects", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Busca un recurso adaptado de tipo System.Byte[].
        /// </summary>
        internal static byte[] rasm {
            get {
                object obj = ResourceManager.GetObject("rasm", resourceCulture);
                return ((byte[])(obj));
            }
        }
    }
}
